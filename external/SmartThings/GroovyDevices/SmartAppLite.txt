/**
 *  Thingspeak Logger for AEON Power Meter Gen5
 *
 *  Copyright 2015 Brian Wilson
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 *  For documentation and updates, please see: https://github.com/bdwilson/ThingSpeak-Energy-Logger
 *
 */
definition(
    name: "Thingspeak LITE Power Logger Gen5",
    namespace: "Upperbay",
    author: "Dave Hardin",
    description: "Logs AEON Gen5 Energy Monitor Data to Mathwork's Thingspeak IoT Platform",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
    section("Log devices...") {
        input "powermeter", "capability.powerMeter", title: "Power Meter", required: false, multiple: true
    }


	//Watts Channel
    section ("ThinkSpeak Watts Channel ID...") {
        input "wattsChannelId", "number", title: "Watts Channel ID"
    }

    section ("ThinkSpeak Watts Write Key...") {
        input "wattsChannelKey", "text", title: "Watts Channel Key"
    }
    
}

def installed() {
    initialize()
}

def updated() {
    unsubscribe()
    initialize()
}

def initialize() {
    subscribe(powermeter, "power", handlePowerEvent)

/*
	atomicState.lastRun = now()/1000
	atomicState.locked = false
	log.debug "Init:" + state.lastRun
  */  
    //updateChannelInfo()
    //log.debug state.fieldMap
}


def handlePowerEvent(evt) {
    logField(evt,"power",  wattsChannelId, wattsChannelKey) { it.toString() }
	log.debug "Logged Power"
}

/*
private getFieldMap(channelInfo) {
    def fieldMap = [:]
    channelInfo?.findAll { it.key?.startsWith("field") }.each { fieldMap[it.value?.trim()] = it.key }
    log.debug "Retrieving channel info for ${fieldMap}"
    return fieldMap
}



private updateChannelInfo(myChannelID,myChannelKey) 
{
    log.debug "Retrieving channel info for ${channelId}"
  	def url = "https://api.thingspeak.com/channels/${channelId}/feeds.json?api_key=${channelKey}"
    log.debug url

	httpGet(url) {
        response ->
        if (response.status != 200 ) {
            log.debug "ThingSpeak data retrieval failed, status = ${response.status}"
        } else {
            state.channelInfo = response.data?.channel
        }
    }
    state.fieldMap = getFieldMap(state.channelInfo)
 	pause(2000)
}
*/
private logField(evt, field, channelID, channelKey, Closure c)
{
    def deviceName = evt.displayName.trim() + '.' + field
    //def fieldNum = state.fieldMap[deviceName]
    def fieldNum = 1

/*
    if (!fieldNum) {
        log.debug "Device '${deviceName}' has no field"
        return
    }
  */  	 
  
    def value = c(evt.value)
    if (value != null)
    {
    	def valuestripped = value.replaceAll("\\s+","")
        if (valuestripped != null)
        {
    		log.debug "Logging to channel ${channelID}, ${fieldNum}, value ${valuestripped}"
       
    		def url = "https://api.thingspeak.com/update?key=${channelKey}&${fieldNum}=${valuestripped}"
    		//def url = "https://api.thingspeak.com/update.json?api_key=${channelKey}&${fieldNum}=${valuestripped}"
			
              			
            log.debug url
            httpGet(url) { 
                response -> 
                if (response.status != 200 ) {
                    log.debug "ThingSpeak logging failed, status = ${response.status}"
                }
            }
       		
        }
        else
        {
        	log.debug "NULL Stripped value." 
        }
    
    }
}